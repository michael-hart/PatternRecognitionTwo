% This file runs various parameters for training/testing neural networks
% with both partition types in turn

% Load the data from generate_partitioned.m
clear;
res_path = get_res_path();

% Make arrays for all variables
hidden_neurons = [10, 15, 20, 25, 30, 35, 40];
algs = ['trainlm '; 'trainbr '; 'trainbfg'; 'trainrp '; ...
        'trainscg'; 'traincgb'; 'traincgf'; 'traincgp'; ...
        'trainoss'; 'traingdx'; 'traingdm'; 'traingd '];
training_algs = cellstr(algs);
ptypes = ['unmixed'; 'mixed  '];
partition_types = cellstr(ptypes); % 17
ntypes = ['fitnet           '; 'feedforwardnet   '; ...
          'cascadeforwardnet'; 'patternnet       '];
net_types = cellstr(ntypes);
hidden_layers = [1, 2, 3];

% Open and write a header into results csv
csv_path = strjoin({res_path 'results.csv'}, filesep);
handle = fopen(csv_path, 'w');
headings = ['Partition Type,Network Type,Training Algorithm,'...
            'Hidden Layers,Hidden Neurons,Time to Train,Time to Test,'...
            'Accuracy,Sum Squared Error,Mean Squared Error', ...
            sprintf('\n')];
fwrite(handle, headings);
fclose(handle);

% Run through all combinations of hidden neurons and training algorithm
% Record information in CSV in this time
for ptype=1:length(partition_types)
    generate_partitioned(ptype~=1);
    partition = deblank(char(partition_types(ptype)));
    clear test l_test training l_training validation l_validation
    load(strjoin({res_path 'partitioned.mat'}, filesep));
    disp(['Testing partition type ', partition]);
    for nt=1:length(net_types)
        for ta=1:length(training_algs)
            for hl=1:length(hidden_layers)
                for hn=1:length(hidden_neurons)
                    if ta==2 && hn > 1
                        continue
                    end
                    alg = deblank(char(training_algs(ta)));
                    ntype = deblank(char(net_types(nt)));
                    [acc,t_train,t_test,err] = ...
                        make_test_nn(training, ...
                                    l_training, ...
                                    test, ...
                                    l_test, validation, ...
                                    l_validation, ...
                                    hidden_neurons(hn), ...
                                    hidden_layers(hl), ...
                                    ntype, ...
                                    alg);
                    disp(['Type: ', ntype, '; Alg: ', alg, '; Layers: ',...
                          num2str(hidden_layers(hl)), '; Neurons: ', ...
                          num2str(hidden_neurons(hn)), '; T_train: ',...
                          num2str(t_train), '; MSE: ', ...
                          num2str(sum(err)/length(err)), '.']);
                    data = [partition, ',', ntype, ',', alg, ',', ...
                            num2str(hidden_layers(hl)), ',', ...
                            num2str(hidden_neurons(hn)), ',', num2str(t_train), ...
                            ',', num2str(t_test), ',', num2str(acc), ',', ...
                            num2str(sum(err)), ',', ...
                            num2str(sum(err)/length(err)), sprintf('\n')];
                    handle = fopen(csv_path, 'a');
                    fwrite(handle, data);
                    fclose(handle);
                end
            end
        end
    end
end
